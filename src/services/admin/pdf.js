import axios from "axios"; // S·ª¨A: import tr·ª±c ti·∫øp t·ª´ axios thay v√¨ @/services/axios

const API_URL = "http://localhost:8080/api";

const apiClient = axios.create({
  baseURL: API_URL,
});

// API t·∫°o v√† t·∫£i xu·ªëng h√≥a ƒë∆°n PDF
export const generateInvoicePDF = async (orderId) => {
  try {
    console.log("üßæ Generating invoice PDF for order ID:", orderId);
    console.log("üîó Full API URL:", `${API_URL}/pdf/invoice/${orderId}`);
    
    // S·ª¨A: S·ª≠ d·ª•ng apiClient thay v√¨ axios v√† b·ªè /api ·ªü ƒë·∫ßu v√¨ ƒë√£ c√≥ trong baseURL
    const response = await apiClient.get(`/pdf/invoice/${orderId}`, {
      responseType: 'blob', // QUAN TR·ªåNG: ƒë·ªÉ nh·∫≠n file PDF
      headers: {
        'Accept': 'application/pdf'
      }
    });

    console.log("üìÑ Response status:", response.status);
    console.log("üìÑ Response data size:", response.data.size, "bytes");

    if (response.status === 200) {
      // Ki·ªÉm tra xem file c√≥ tr·ªëng kh√¥ng
      if (response.data.size === 0) {
        throw new Error("File PDF tr·ªëng");
      }

      // T·∫°o URL blob cho file PDF
      const pdfBlob = new Blob([response.data], { type: 'application/pdf' });
      const pdfUrl = window.URL.createObjectURL(pdfBlob);
      
      // T·∫°o link download t·ª± ƒë·ªông
      const downloadLink = document.createElement('a');
      downloadLink.href = pdfUrl;
      downloadLink.download = `HoaDon_${orderId}_${new Date().toISOString().slice(0, 10)}.pdf`;
      
      // ·∫®n link v√† trigger click ƒë·ªÉ t·ª± ƒë·ªông download
      downloadLink.style.display = 'none';
      document.body.appendChild(downloadLink);
      downloadLink.click();
      
      // Cleanup v·ªõi delay nh·ªè
      setTimeout(() => {
        document.body.removeChild(downloadLink);
        window.URL.revokeObjectURL(pdfUrl);
      }, 100);
      
      console.log("‚úÖ Invoice PDF downloaded successfully");
      
      return {
        success: true,
        message: "H√≥a ƒë∆°n ƒë√£ ƒë∆∞·ª£c t·∫£i xu·ªëng th√†nh c√¥ng"
      };
    }
    
  } catch (error) {
    console.error("‚ùå Error generating invoice PDF:", error);
    console.error("‚ùå Full error details:", {
      message: error.message,
      status: error.response?.status,
      statusText: error.response?.statusText,
      url: error.config?.url
    });
    
    let errorMessage = "Kh√¥ng th·ªÉ t·∫°o h√≥a ƒë∆°n PDF";
    if (error.response?.status === 404) {
      errorMessage = "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng";
    } else if (error.response?.status === 500) {
      errorMessage = "L·ªói server khi t·∫°o h√≥a ƒë∆°n";
    } else if (error.code === 'ECONNREFUSED' || error.code === 'ERR_NETWORK') {
      errorMessage = "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server";
    } else if (error.response?.data?.message) {
      errorMessage = error.response.data.message;
    }
    
    throw new Error(errorMessage);
  }
};

// API download tr·ª±c ti·∫øp v·ªõi t√™n file t√πy ch·ªânh
export const downloadInvoiceWithCustomName = async (orderId, customerName = "") => {
  try {
    console.log("üßæ Downloading invoice with custom name:", { orderId, customerName });
    
    // S·ª¨A: S·ª≠ d·ª•ng apiClient v√† ƒë∆∞·ªùng d·∫´n ƒë√∫ng
    const response = await apiClient.get(`/pdf/invoice/${orderId}`, {
      responseType: 'blob',
      headers: {
        'Accept': 'application/pdf'
      }
    });

    if (response.status === 200) {
      const pdfBlob = new Blob([response.data], { type: 'application/pdf' });
      const pdfUrl = window.URL.createObjectURL(pdfBlob);
      
      // T·∫°o t√™n file v·ªõi t√™n kh√°ch h√†ng (n·∫øu c√≥)
      const sanitizedCustomerName = customerName 
        ? customerName.replace(/[^a-zA-Z0-9\s]/g, '').replace(/\s+/g, '_')
        : '';
      
      const fileName = sanitizedCustomerName 
        ? `HoaDon_${orderId}_${sanitizedCustomerName}_${new Date().toISOString().slice(0, 10)}.pdf`
        : `HoaDon_${orderId}_${new Date().toISOString().slice(0, 10)}.pdf`;
      
      const downloadLink = document.createElement('a');
      downloadLink.href = pdfUrl;
      downloadLink.download = fileName;
      downloadLink.style.display = 'none';
      
      document.body.appendChild(downloadLink);
      downloadLink.click();
      
      setTimeout(() => {
        document.body.removeChild(downloadLink);
        window.URL.revokeObjectURL(pdfUrl);
      }, 100);
      
      console.log("‚úÖ Invoice downloaded with filename:", fileName);
      
      return { 
        success: true, 
        fileName,
        message: "H√≥a ƒë∆°n ƒë√£ ƒë∆∞·ª£c t·∫£i xu·ªëng th√†nh c√¥ng"
      };
    }
  } catch (error) {
    console.error("‚ùå Error downloading invoice:", error);
    throw error;
  }
};

// API xem tr∆∞·ªõc h√≥a ƒë∆°n trong tab m·ªõi (optional)
export const previewInvoice = async (orderId) => {
  try {
    console.log("üëÅÔ∏è Previewing invoice:", orderId);
    
    const response = await apiClient.get(`/pdf/invoice/${orderId}`, {
      responseType: 'blob',
      headers: {
        'Accept': 'application/pdf'
      }
    });

    if (response.status === 200) {
      const pdfBlob = new Blob([response.data], { type: 'application/pdf' });
      const pdfUrl = window.URL.createObjectURL(pdfBlob);
      
      // M·ªü PDF trong tab m·ªõi ƒë·ªÉ xem tr∆∞·ªõc
      const newWindow = window.open(pdfUrl, '_blank');
      
      if (!newWindow) {
        throw new Error("Popup b·ªã ch·∫∑n. Vui l√≤ng cho ph√©p popup ƒë·ªÉ xem h√≥a ƒë∆°n.");
      }
      
      // Cleanup sau 1 ph√∫t
      setTimeout(() => {
        window.URL.revokeObjectURL(pdfUrl);
      }, 60000);
      
      return { success: true };
    }
  } catch (error) {
    console.error("‚ùå Error previewing invoice:", error);
    throw error;
  }
};